$date
2021-04-16T11:37+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Exercise2_Lab8 $end
 $var wire 16 " _io_dataOut_1_T_1 $end
 $var wire 16 $ wrDataReg_0 $end
 $var wire 1 & io_write $end
 $var wire 16 ' _io_dataOut_0_T $end
 $var wire 1 ( mem_1_memread_en_pipe_0 $end
 $var wire 1 + io_enable $end
 $var wire 1 , io_mask_1 $end
 $var wire 10 - io_addr $end
 $var wire 16 . mem_1 $end
 $var wire 16 / io_dataOut_1 $end
 $var wire 16 2 io_dataIn_1 $end
 $var wire 16 9 io_dataIn_0 $end
 $var wire 1 : doForwardReg $end
 $var wire 1 < clock $end
 $var wire 1 = mem_0_memread_en_pipe_0 $end
 $var wire 16 A wrDataReg_1 $end
 $var wire 16 D _io_dataOut_0_T_1 $end
 $var wire 16 E mem_0 $end
 $var wire 1 F io_mask_0 $end
 $var wire 16 H io_dataOut_0 $end
 $var wire 16 I _io_dataOut_1_T $end
 $var wire 10 L mem_0_memread_addr_pipe_0 $end
 $var wire 1 M reset $end
 $var wire 10 P mem_1_memread_addr_pipe_0 $end
  $scope module mem_0 $end
   $var wire 16 # MPORT $end
    $scope module memread $end
     $var wire 1 ! en $end
     $var wire 10 ; addr $end
     $var wire 16 Q data $end
     $var wire 1 S clk $end
    $upscope $end
    $scope module MPORT $end
     $var wire 10 % pipeline_addr_0 $end
     $var wire 16 ) data $end
     $var wire 16 0 pipeline_data_0 $end
     $var wire 1 6 en $end
     $var wire 1 8 clk $end
     $var wire 1 > mask $end
     $var wire 1 G valid $end
     $var wire 10 N addr $end
     $var wire 1 T pipeline_valid_0 $end
    $upscope $end
  $upscope $end
  $scope module mem_1 $end
   $var wire 16 O MPORT $end
    $scope module MPORT $end
     $var wire 1 * en $end
     $var wire 16 1 pipeline_data_0 $end
     $var wire 1 3 mask $end
     $var wire 1 5 pipeline_valid_0 $end
     $var wire 10 7 addr $end
     $var wire 1 ? valid $end
     $var wire 1 @ clk $end
     $var wire 16 J data $end
     $var wire 10 R pipeline_addr_0 $end
    $upscope $end
    $scope module memread $end
     $var wire 10 4 addr $end
     $var wire 1 B clk $end
     $var wire 16 C data $end
     $var wire 1 K en $end
    $upscope $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
b0000000000000000 H
0&
b0000000000000000 I
b0000000000000000 A
0<
b0000000000 -
0=
0S
b0000000000000000 C
b0000000000000000 .
0>
06
0!
b0000000000000000 D
0T
b0000000000000000 '
b0000000000000000 E
0M
08
b0000000000000000 )
0:
b0000000000000000 "
03
b0000000000000000 #
b0000000000000000 9
b0000000000000000 $
b0000000000 %
b0000000000000000 O
05
b0000000000 P
b0000000000 ;
0K
b0000000000000000 Q
b0000000000 4
b0000000000 R
b0000000000000000 J
0(
0F
b0000000000 L
b0000000000 7
0G
b0000000000000000 /
0*
0?
b0000000000 N
b0000000000000000 0
0+
0@
b0000000000000000 1
0,
b0000000000000000 2
0B
$end
#0
1M
#1
1B
1<
1@
18
1S
#6
0B
0<
1&
0S
16
1>
0M
b0000000000000010 )
1F
0@
08
1G
1*
b0000000000000010 9
1+
#11
1B
b0000000000000010 Q
1<
b0000000000000010 D
1S
b0000000000000010 '
1K
1=
1(
1!
b0000000000000010 0
1T
1@
18
b0000000000000010 $
b0000000000000010 H
1:
#16
0B
0<
0@
08
0S
#21
1B
1<
1@
18
1S
#26
0B
0<
0@
08
0S
#31
1B
1<
1@
18
1S
#36
0B
0<
0&
b0000000000000000 D
0S
b0000000000000000 '
06
0>
b0000000000000000 )
0F
0@
08
0G
0*
b0000000000000000 9
b0000000000000000 H
0+
#41
1B
1<
1S
0K
0=
0(
0!
b0000000000000000 0
0T
1@
18
b0000000000000000 $
b0000000000000010 H
0:
#46
0<
